!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).BluetoothHeartRate={})}(this,(function(e){"use strict";let t=null;e.connect=function(){return navigator.bluetooth.requestDevice({filters:[{services:["heart_rate"]}]}).then((e=>(console.log("Device discovered",e.name),e.gatt.connect()))).then((e=>(console.log("Getting Heart Rate Service..."),e.getPrimaryService("heart_rate")))).then((e=>(console.log("Getting Heart Rate Measurement Characteristic..."),e.getCharacteristic("heart_rate_measurement")))).then((e=>(t=e,console.log("Connected to heart rate measurement characteristic."),t))).catch((e=>{console.log("Argh! "+e)}))},e.startHeartRateMeasurement=function(e,n=void 0){if(!t)return void console.log("Please connect to a device first.");const o=n?throttle(e,1e3*n):e;t.startNotifications().then((e=>{t.addEventListener("characteristicvaluechanged",(e=>{const t=function(e){let t=e.target.value;return function(e){let t=0==(1&e.getUint8(0))?"uint8":"uint16",n=e.getUint8(1);"uint16"===t&&(n=e.getUint16(1,!0));return n}(t)}(e);o(t)}))}))},e.stopHeartRateMeasurement=function(){t&&(t.stopNotifications(),console.log("Stopped heart rate measurement."))},Object.defineProperty(e,"__esModule",{value:!0})}));
