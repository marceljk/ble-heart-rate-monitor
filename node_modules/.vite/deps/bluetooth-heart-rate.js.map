{
  "version": 3,
  "sources": ["../../bluetooth-heart-rate/src/index.js"],
  "sourcesContent": ["let intervalId = null;\nlet characteristicInstance = null;\n\nexport function connect() {\n  return navigator.bluetooth.requestDevice({\n    filters: [{\n      services: ['heart_rate']\n    }]\n  })\n    .then(device => {\n      console.log('Device discovered', device.name);\n      return device.gatt.connect();\n    })\n    .then(server => {\n      console.log('Getting Heart Rate Service...');\n      return server.getPrimaryService('heart_rate');\n    })\n    .then(service => {\n      console.log('Getting Heart Rate Measurement Characteristic...');\n      return service.getCharacteristic('heart_rate_measurement');\n    })\n    .then(characteristic => {\n      characteristicInstance = characteristic;\n      console.log('Connected to heart rate measurement characteristic.');\n      return characteristicInstance;\n    })\n    .catch(error => {\n      console.log('Argh! ' + error);\n    });\n}\n\nexport function startHeartRateMeasurement(callback, intervalInSeconds = undefined) {\n  if (!characteristicInstance) {\n    console.log('Please connect to a device first.');\n    return;\n  }\n\n  const throttledCallback = intervalInSeconds ? throttle(callback, intervalInSeconds * 1000) : callback;\n\n  characteristicInstance.startNotifications().then(_ => {\n    characteristicInstance.addEventListener('characteristicvaluechanged',\n      (event) => {\n        const heartRate = handleHeartRateMeasurement(event);\n        throttledCallback(heartRate);\n      });\n  });\n}\n\n\nexport function stopHeartRateMeasurement() {\n  if (characteristicInstance) {\n    characteristicInstance.stopNotifications();\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    console.log('Stopped heart rate measurement.');\n  }\n}\n\nfunction handleHeartRateMeasurement(event) {\n  let sensorData = event.target.value;\n  return parseHeartRate(sensorData);\n}\n\nfunction parseHeartRate(value) {\n  let format = (value.getUint8(0) & 0x01) === 0 ? 'uint8' : 'uint16';\n  let heartRate = value.getUint8(1);\n  if (format === 'uint16') {\n    heartRate = value.getUint16(1, /*littleEndian=*/true);\n  }\n  return heartRate;\n}\n"],
  "mappings": ";AAAA,IAAI,aAAa;AACjB,IAAI,yBAAyB;AAEtB,SAAS,UAAU;AACxB,SAAO,UAAU,UAAU,cAAc;AAAA,IACvC,SAAS,CAAC;AAAA,MACR,UAAU,CAAC,YAAY;AAAA,IACzB,CAAC;AAAA,EACH,CAAC,EACE,KAAK,YAAU;AACd,YAAQ,IAAI,qBAAqB,OAAO,IAAI;AAC5C,WAAO,OAAO,KAAK,QAAQ;AAAA,EAC7B,CAAC,EACA,KAAK,YAAU;AACd,YAAQ,IAAI,+BAA+B;AAC3C,WAAO,OAAO,kBAAkB,YAAY;AAAA,EAC9C,CAAC,EACA,KAAK,aAAW;AACf,YAAQ,IAAI,kDAAkD;AAC9D,WAAO,QAAQ,kBAAkB,wBAAwB;AAAA,EAC3D,CAAC,EACA,KAAK,oBAAkB;AACtB,6BAAyB;AACzB,YAAQ,IAAI,qDAAqD;AACjE,WAAO;AAAA,EACT,CAAC,EACA,MAAM,WAAS;AACd,YAAQ,IAAI,WAAW,KAAK;AAAA,EAC9B,CAAC;AACL;AAEO,SAAS,0BAA0B,UAAU,oBAAoB,QAAW;AACjF,MAAI,CAAC,wBAAwB;AAC3B,YAAQ,IAAI,mCAAmC;AAC/C;AAAA,EACF;AAEA,QAAM,oBAAoB,oBAAoB,SAAS,UAAU,oBAAoB,GAAI,IAAI;AAE7F,yBAAuB,mBAAmB,EAAE,KAAK,OAAK;AACpD,2BAAuB;AAAA,MAAiB;AAAA,MACtC,CAAC,UAAU;AACT,cAAM,YAAY,2BAA2B,KAAK;AAClD,0BAAkB,SAAS;AAAA,MAC7B;AAAA,IAAC;AAAA,EACL,CAAC;AACH;AAGO,SAAS,2BAA2B;AACzC,MAAI,wBAAwB;AAC1B,2BAAuB,kBAAkB;AACzC,QAAI,YAAY;AACd,oBAAc,UAAU;AACxB,mBAAa;AAAA,IACf;AACA,YAAQ,IAAI,iCAAiC;AAAA,EAC/C;AACF;AAEA,SAAS,2BAA2B,OAAO;AACzC,MAAI,aAAa,MAAM,OAAO;AAC9B,SAAO,eAAe,UAAU;AAClC;AAEA,SAAS,eAAe,OAAO;AAC7B,MAAI,UAAU,MAAM,SAAS,CAAC,IAAI,OAAU,IAAI,UAAU;AAC1D,MAAI,YAAY,MAAM,SAAS,CAAC;AAChC,MAAI,WAAW,UAAU;AACvB,gBAAY,MAAM;AAAA,MAAU;AAAA;AAAA,MAAoB;AAAA,IAAI;AAAA,EACtD;AACA,SAAO;AACT;",
  "names": []
}
